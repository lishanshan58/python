mydict = {'a':2,'b':4,'c':3,'d':1}

3 ways to sort a dictionary by VALUE (actually, you end up with a list of tuples):
my_list_of_tuples = sorted(mydict.items(), key=lambda x: x[1])  # by default, asc order
[('d', 1), ('a', 2), ('c', 3), ('b', 4)]
my_list_of_tuples = sorted(mydict.items(), key=lambda x: x[1], reverse=True)  # in descending order
[('b', 4), ('c', 3), ('a', 2), ('d', 1)]

This 2nd way is much faster with larger data since it uses C code):
from operator import itemgetter
sorted(mydict.items(), key=itemgetter(1))
sorted(mydict.items(), key=itemgetter(1), reverse=True)

Here is how you would sort a dictionary by KEY:
sorted(mydict.items(), key=lambda x: x[0])
sorted(mydict.items(), key=lambda x: x[0], reverse=True)
# Faster using C code:
sorted(mydict.items(), key=itemgetter(0))
sorted(mydict.items(), key=itemgetter(0), reverse=True)

Third way is using collections.OrderedDict:
from collections import OrderedDict

d = {'banana': 3, 'apple':4, 'pear': 1, 'orange': 2}
OD = OrderedDict(sorted(d.items(), key=lambda t: t[1])) # Sort by value or
OD = OrderedDict(sorted(d.items(), key=lambda t: t[0])) # Sorty by key

###########################################################################################################
To "unbox" the list of tuple values into 2 lists (one list containing the keys, another containing values):
key_list = []
value_list = []

for key, value in my_list_of_tuples:
    key_list.append(key)       # = ['a','b','c','d']
    value_list.append(value)   # = [2, 4, 3, 1]
